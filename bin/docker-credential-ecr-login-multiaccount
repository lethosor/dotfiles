#!/usr/bin/env python3

"""
A docker credential helper that supports multiple AWS accounts.

Prerequisites:
- docker
- docker-credential-ecr-login

To set up:
- Add this script to your PATH and ensure that it is executable
- Create/edit `~/.docker/config.json` and add an entry for each repository you
  want to use under `credHelpers`:

    {
        "credHelpers": {
            "123412341234.dkr.ecr.us-east-1.amazonaws.com": "ecr-login-multiaccount",
            "567856785678.dkr.ecr.us-east-1.amazonaws.com": "ecr-login-multiaccount"
        }
    }

- Create/edit `~/.aws/account_to_profile.json` and add an entry mapping each
  account number to the name of a corresponding AWS profile (e.g. defined in
  `~/.aws/config`):

    {
        "123412341234": "my-sample-profile",
        "567856785678": "my-sample-profile-2"
    }

"""

import json
import os
import re
import subprocess
import sys

def warn(msg):
    sys.stderr.write('{}: WARN: {}\n'.format(os.path.basename(sys.argv[0]), msg))

_debug_prefix = '%s: ' % os.path.basename(sys.argv[0])
def debug(msg):
    if os.environ.get('ECR_LOGIN_DEBUG'):
        with open('/dev/tty', 'w') as f:
            f.write('%s%s\n' % (_debug_prefix, msg))
            f.flush()

# expected to contain map of account ID -> AWS_PROFILE value
CONFIG_PATH = os.path.expanduser('~/.aws/account_to_profile.json')
try:
    with open(CONFIG_PATH) as f:
        config = json.load(f)
except Exception as e:
    warn('Could not load config from {!r}: {}'.format(CONFIG_PATH, e))
    config = {}

stdin = sys.stdin.read()
if sys.argv[1] == 'get':
    match = re.search(r'\d{12}', stdin)
    if match:
        account_id = match.group(0)
        if account_id in config:
            os.environ['AWS_PROFILE'] = config[account_id]
        else:
            warn('No profile set for account {}'.format(account_id))
    else:
        warn('Could not parse account ID from {!r}'.format(stdin))

debug('invoked as: %r' % str(sys.argv))
debug('with stdin: %r' % str(stdin))
debug('AWS_PROFILE: %r' % str(os.environ.get('AWS_PROFILE')))

p = subprocess.run(['docker-credential-ecr-login'] + sys.argv[1:], input=stdin.encode('utf-8'))

debug('docker-credential-ecr-login exited with: %r' % p.returncode)

exit(p.returncode)
