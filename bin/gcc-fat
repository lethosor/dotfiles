#!/usr/bin/env python
import atexit, os, shutil, subprocess, sys, tempfile

tmpdir = tempfile.mkdtemp()
@atexit.register
def cleanup():
    shutil.rmtree(tmpdir)

def fatal(msg, code=1):
    sys.stderr.write('%s: %s\n' % (sys.argv[0], msg))
    sys.exit(code)

if 'g++' in os.path.split(sys.argv[0])[-1]:
    compiler = os.environ.get('REAL_CXX', 'g++')
else:
    compiler = os.environ.get('REAL_CC', 'gcc')
compiler = compiler.strip()

args = sys.argv[1:]
output_name = ''
for i, arg in enumerate(args):
    if arg == '-o':
        if i + 1 < len(args):
            output_name = args[i + 1]
            break
    elif arg.startswith('-o'):
        output_name = arg[2:]
        break
if not output_name:
    fatal('no output file specified', code=2)

def output_path(arch):
    return os.path.join(tmpdir, 'tmp-' + str(arch))

def compile_arch(arch):
    subprocess.check_call([compiler, '-m' + str(arch)] + args)
    shutil.move(output_name, output_path(arch))

try:
    map(compile_arch, (32, 64))
except subprocess.CalledProcessError:
    fatal('compilation failed')

try:
    subprocess.check_call(['lipo', '-create', '-o', output_name] + list(map(output_path, (32, 64))))
except subprocess.CalledProcessError:
    fatal('lipo failed', code=2)
