#!/usr/bin/env python3-system

import argparse
import os
import socket
import sys
import threading
import time
from urllib.parse import urlparse

import gi
gi.require_version('Notify', '0.7')
from gi.repository import GLib, Notify

try:
    from mcstatus import JavaServer
except ImportError:
    from mcstatus import MinecraftServer as JavaServer

def get_players(server):
    players = server.status().players.sample or []
    return set(str(p.name) for p in players)

def update_notification(players, notification):
    if players:
        body = '%i online: %s' % (len(players), ', '.join(players))
    else:
        body = 'No players online'
    notification.update(notification.props.summary, body, notification.props.icon_name)
    print('%s %s' % (time.strftime('%c'), body))
    notification.show()

def main(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('server')
    args = parser.parse_args(args)

    parsed_address = urlparse('minecraft://' + args.server)
    server_kwargs = {}
    if parsed_address.port is not None:
        server_kwargs['port'] = int(parsed_address.port)
    server = JavaServer(parsed_address.hostname, **server_kwargs)
    server.ping()

    Notify.init(os.path.basename(sys.argv[0]))
    notification = Notify.Notification.new('Minecraft status: %s' % args.server, '', 'minecraft-launcher')
    loop = GLib.MainLoop()  # todo: use to handle notification closure: https://stackoverflow.com/a/32839454
    prev_players = None

    try:
        while True:
            try:
                players = get_players(server)
                if players != prev_players:
                    update_notification(players, notification)
                    prev_players = players
            except socket.error as e:
                print('%s %s' % (time.strftime('%c '), e))
            time.sleep(60)
    except (KeyboardInterrupt, SystemExit):
        pass
    finally:
        notification.close()

if __name__ == '__main__':
    main(sys.argv[1:])
