#! /usr/bin/env python
import argparse, importlib, os, subprocess, sys
PY_VERSION = '.'.join(list(str(i) for i in sys.version_info)[:2])
parser = argparse.ArgumentParser()
parser.add_argument('module', help='module name')
parser.add_argument('-p', '--path', '--print', action='store_true',
                    help='Display path only')
parser.add_argument('-c', '-o', '-w', '--command', '--with', '--open-with',
                    required=False, help='Command to execute when opening file',
                    metavar='command')
parser.add_argument('-v', '--version', type=str, required=False,
                    help="Python version", default=PY_VERSION)
args = parser.parse_args(sys.argv[1:])
if args.version != PY_VERSION:
    py_exec = 'python' + args.version
    try:
        py_path = subprocess.check_output(['which', py_exec]).replace('\n', '').replace('\r', '')
    except subprocess.CalledProcessError:
        print('Python version "%s" not found' % args.version)
        sys.exit(4)
    sys.exit(subprocess.call([py_path] + sys.argv))

OPEN = args.command if args.command is not None else (
    os.environ['OPEN'] if 'OPEN' in os.environ else 'open'
)
try:
    module = importlib.import_module(args.module)
    if not hasattr(module, '__file__'):
        raise TypeError('Does not have a filename (likely built-in)')
    path = module.__file__.replace('.pyc', '.py')
    if args.path:
        print(path)
    else:
        os.system(OPEN + ' ' + path)
except ImportError:
    print('Module "%s" not found' % args.module)
    sys.exit(2)
except Exception as e:
    print('Module "%s" cannot be opened: %s' % (args.module, e))
    sys.exit(3)
