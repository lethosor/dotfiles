#!/usr/bin/env python3
import argparse, importlib, os, subprocess, sys
PY_VERSION = '.'.join(list(str(i) for i in sys.version_info)[:2])
parser = argparse.ArgumentParser()
parser.add_argument('module', help='module name')
parser.add_argument('-p', '--path', '--print', action='store_true',
                    help='Display path only')
parser.add_argument('-c', '-e', '-o', '-w', '--command', '--editor', '--with',
                    '--open-with',
                    required=False, help='Command to use to opening file',
                    metavar='editor', dest='editor')
parser.add_argument('-v', '--version', type=str, required=False,
                    help="Python version", default=PY_VERSION)
args = parser.parse_args(sys.argv[1:])
if not PY_VERSION.startswith(args.version):
    py_exec = 'python' + args.version
    try:
        py_path = subprocess.check_output(['which', py_exec]).decode().replace('\n', '').replace('\r', '')
    except subprocess.CalledProcessError:
        print('Python version "%s" not found' % args.version)
        sys.exit(4)
    sys.exit(subprocess.call([py_path] + sys.argv))

editor = args.editor
if editor is None:
    editor = 'open'
    for var in ('OPENPY_EDITOR', 'EDITOR', 'OPEN'):
        if var in os.environ:
            editor = os.environ[var]
            break

try:
    try:
        from importlib.util import find_spec
    except ImportError:
        # fallback for python < 3.4
        module = importlib.import_module(args.module)
        if not hasattr(module, '__file__'):
            raise TypeError('Does not have a filename (likely built-in)')
        path = module.__file__.replace('.pyc', '.py')
    else:
        spec = find_spec(args.module)
        if not spec:
            raise ImportError
        if not spec.has_location:
            origin = spec.origin
            if not origin and spec.loader:
                origin = spec.loader.find_spec(args.module).origin
            raise TypeError('Does not have a location (%s)' %
                origin if origin else 'possibly built-in')
        path = spec.origin
    if args.path:
        print(path)
    else:
        subprocess.call(editor.split() + [path])
except ImportError:
    print('Module "%s" not found' % args.module)
    sys.exit(2)
except Exception as e:
    print('Module "%s" cannot be opened: %s' % (args.module, e))
    sys.exit(3)
